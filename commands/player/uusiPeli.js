const mongoose = require("mongoose"); //Mongoose moduuli mukaan
const botconfig = require("../../botconfig.json"); //MÃ¤Ã¤ritellÃ¤Ã¤n botin asetukset JSON-filusta
const Discord = require('discord.js');

mongoose.set('useFindAndModify', false);

//YhdistetÃ¤Ã¤n MongoDB:hen:
mongoose.connect(botconfig.mongoPass, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})

const Data1 = require("../../models/players.js"); //Viitataan malliin players.js
const Data2 = require("../../models/easy_questions.js"); //Viitataan malliin easy_questions.js

//TÃ¤llÃ¤ funktiolla saadaan esitettyÃ¤ vastausvaihtoehdot random-jÃ¤rjestyksessÃ¤, ottaa vastaan vÃ¤Ã¤rien vastausten arrayn ja oikean vastauksen
function shuffleAnswers(new_array,answer) {
  
    //LisÃ¤Ã¤ taulukkoon oikean vastauksen
    new_array.push(answer) 
    var currentIndex = new_array.length, temporaryValue, randomIndex;
  
    // Toistetaan niin kauan kun arrayssa on elementtejÃ¤ sekoitettavana
    while (0 !== currentIndex) {
  
      // Poimii jÃ¤ljelle jÃ¤Ã¤neen elementin
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
  
      // Vaihdetaan sen paikka randomindeksillÃ¤
      temporaryValue = new_array[currentIndex];
      new_array[currentIndex] = new_array[randomIndex];
      new_array[randomIndex] = temporaryValue;
    }
    //Palauttaa sekoitetun uuden arrayn (jossa siis on kaikki vastausvaihtoehdot)
    return new_array;
  }

module.exports.run = async (bot, message, args) => {
     
     //EtsitÃ¤Ã¤n olemassa olevaa dokumenttia
    Data1.findOne ({

        pelaajan_id: message.author.id //EtsitÃ¤Ã¤n dokumentti ID:n perusteella, HUOM. pitÃ¤Ã¤ olla databasessa numerona (ei String)!

    }, (err, data) => {

        //Tarkistetaan, onko kysymyskytkin pÃ¤Ã¤llÃ¤
        //Jos tÃ¤llaista ominaisuutta ei tarkistettaisi, voisi kÃ¤yttÃ¤jÃ¤ pyytÃ¤Ã¤ uuden kysymyksen kesken edellistÃ¤ ja peli menisi ihan sekaisin
        if (data.kysymys_kytkin === true) {
            return message.reply("Et voi kÃ¤yttÃ¤Ã¤ uusia pelikomentoja, ennen kuin olet vastannut edelliseen kysymykseen!").catch(err => console.log(err));
        }
        //"data" viittaa dokumentin sisÃ¤llÃ¤ olevaan tietoon
        if (data.peli_kaynnissa === true) {

            
            return message.reply("Sinulla on jo kÃ¤ynnissÃ¤ oleva peli, kÃ¤ytÃ¤ komentoa !seuraava saadaksesi uuden kysymyksen!").catch(err => console.log(err));
            

        } else {
            
            //Asetetaan kysymyskytkin trueksi, jotta pelaaja ei voi pyytÃ¤Ã¤ botilta uusia kysymyksiÃ¤ ennen kuin pÃ¤Ã¤llÃ¤ olevaan on vastattu
            //Kun kysymykseen on vastattu, kytkin menee jÃ¤lleen offille ja pelaajan on mahdollista pyytÃ¤Ã¤ uusi kysymys
            Data1.findOneAndUpdate({pelaajan_id: message.author.id},{kysymys_kytkin : true},(err, data) => {
                if(err){
                    console.log(err)
                } 
            })

            console.log(`${data.pelaajan_id} aloitti uuden pelin`)

            //Kun uusi peli aloitetaan, muutetaan tietokantaan pelaajakohtaisia tietoja "peli_kÃ¤ynnissÃ¤ -> true ja voitot nollataan"
            Data1.findOneAndUpdate({pelaajan_id: message.author.id},{peli_kaynnissa : true},(err, data) => {
                if(err){
                    console.log(err)
                } else {
                    console.log(`Muutettiin pelaajan ${data.pelaajan_nimi} peli status trueksi`)
                }
            })

            Data1.findOneAndUpdate({pelaajan_id: message.author.id},{voitot : 0},(err, data) => {
                if(err){
                    console.log(err)
                } else {
                    console.log(`Nollattiin pelaajan ${data.pelaajan_nimi} voitot uuden pelin myÃ¶tÃ¤`)
                }
            })
            
            
            //Luetaan kaikkien easy-kategorian dokumenttien lukumÃ¤Ã¤rÃ¤
            Data2.countDocuments().exec(function (err, count) {

            // MÃ¤Ã¤ritetÃ¤Ã¤n random numero, jolla valitaan dokumentti 
            var random = Math.floor(Math.random() * count)
  
            // Luetaan taas dokumentit, mutta skipataan kaikki muut paitsi "random"-luvun mukainen, tÃ¤mÃ¤ dokumentti menee botin antamaksi kysymykseksi
            Data2.findOne().skip(random).exec(
            function (err, data) {

            //Laitetaan dokumentin vastaukset funktiolle, joka muodostaa niistÃ¤ random jÃ¤rjestyksessÃ¤ olevan arrayn
            let answers = shuffleAnswers(data.incorrect_answers,data.correct_answer); 
            
            //Luodaan filtteri, joka sallii vain tietyillÃ¤ emojeilla reagoinnin ja ainoastaan komennon kirjoittajan reagoinnit lasketaan
            const filter = (reaction, user) => ["ğŸ‡¦","ğŸ‡§","ğŸ‡¨","ğŸ‡©"].includes(reaction.emoji.name) && user.id === message.author.id;

            // Kysymyspohja
            const exampleEmbed = new Discord.MessageEmbed()
            .setDescription(`Category: ${data.category}`)
            .setColor('#0099ff')
            .setTitle(data.question)
            .setURL('https://discord.js.org/')
            .setAuthor('Question 1')
            .setThumbnail('https://i.imgur.com/wSTFkRM.png')
            .addFields(
                { name: 'A)', value: answers[0]},
                { name: 'B)', value: answers[1]},
                { name: 'C)', value: answers[2]},
                { name: 'D)', value: answers[3]},
            )
            
            .setImage('https://i.imgur.com/wSTFkRM.png')
            
            //Kysymyspohjan lÃ¤hetys channelille
            message.channel.send(exampleEmbed).then(async sentEmbed => {
                
                await sentEmbed.react("ğŸ‡¦")
                await sentEmbed.react("ğŸ‡§")
                await sentEmbed.react("ğŸ‡¨")
                await sentEmbed.react("ğŸ‡©")

                //Asetuksia reaktioille, esim. vain yksi reagointi lasketaan (max : 1) ja myÃ¶s voidaan asettaa vastausaika
                sentEmbed.awaitReactions(filter, {
                   max: 1,
                //    time: 30000,
                   errors: ['time'] 
                }).then(collected => {

                    //Asetetaan switch-caset eri reagoinneille
                    const reaction = collected.first();

                    switch (reaction.emoji.name) {
                        case 'ğŸ‡¦':
                            //Jos valinta vastaa oikeaa vastausta, lisÃ¤tÃ¤Ã¤n pelaajan voittoihin 100â‚¬
                            //Jos valinta on vÃ¤Ã¤rÃ¤, peli on ohi ja voitot nollataan
                            if (answers[0] === data.correct_answer) {
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{kysymys_kytkin : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } 
                                })
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{voitot : 100},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } else {
                                        message.reply("Aivan oikein! Voitit juuri 100â‚¬. Komennolla !seuraava voit aloittaa seuraavaan kysymyksen")
                                    }
                                })
                                
                            } else {
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{kysymys_kytkin : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } 
                                })
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{peli_kaynnissa : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } else {
                                        message.reply(`TÃ¤mÃ¤ on valitettavasti vÃ¤Ã¤rÃ¤ vastaus. HÃ¤visit pelin`)
                                    }
                                })
                            }
                            break;
                        case 'ğŸ‡§':
                            if (answers[1] === data.correct_answer) {
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{kysymys_kytkin : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } 
                                })
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{voitot : 100},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } else {
                                        
                                        message.reply("Aivan oikein! Voitit juuri 100â‚¬. Komennolla !seuraava voit aloittaa seuraavaan kysymyksen")
                                    }
                                })
                                
                            } else {
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{kysymys_kytkin : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } 
                                })
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{peli_kaynnissa : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } else {
                                        message.reply(`TÃ¤mÃ¤ on valitettavasti vÃ¤Ã¤rÃ¤ vastaus. HÃ¤visit pelin`)
                                    }
                                })
                            }
                            break;
                        case 'ğŸ‡¨':
                            if (answers[2] === data.correct_answer) {
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{kysymys_kytkin : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } 
                                })
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{voitot : 100},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } else {
                                        message.reply("Aivan oikein! Voitit juuri 100â‚¬. Komennolla !seuraava voit aloittaa seuraavaan kysymyksen")
                                    }
                                })
                                
                            } else {
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{kysymys_kytkin : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } 
                                })
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{peli_kaynnissa : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } else {
                                        message.reply(`TÃ¤mÃ¤ on valitettavasti vÃ¤Ã¤rÃ¤ vastaus. HÃ¤visit pelin`)
                                    }
                                })
                            }
                            break;
                        case 'ğŸ‡©':
                            if (answers[3] === data.correct_answer) {
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{kysymys_kytkin : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } 
                                })
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{voitot : 100},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } else {
                                        message.reply("Aivan oikein! Voitit juuri 100â‚¬. Komennolla !seuraava voit aloittaa seuraavaan kysymyksen")
                                    }
                                })
                                
                            } else {
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{kysymys_kytkin : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } 
                                })
                                Data1.findOneAndUpdate({pelaajan_id: message.author.id},{peli_kaynnissa : false},(err, data) => {
                                    if(err){
                                        console.log(err)
                                    } else {
                                        message.reply(`TÃ¤mÃ¤ on valitettavasti vÃ¤Ã¤rÃ¤ vastaus. HÃ¤visit pelin`)
                                    }
                                })
                            }
                            break;                 
                    }
                })
            });
            })
        })
        }
     })
    }   


//komento toimii nÃ¤illÃ¤ sanoilla   
module.exports.help = {
    name: "haluan_miljonÃ¤Ã¤riksi",
    aliases: []
}
